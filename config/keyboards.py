from aiogram import types
from typing import Dict
from ..database.models import CategoryManager, QuestionManager

def get_my_keyboard(role: str, data: Dict[str, str]) -> types.InlineKeyboardMarkup:
    buttons = []
    row = []
    for name, callback in data.items():  
        row.append(types.InlineKeyboardButton(
            text=name, 
            callback_data=f"{role}{callback}"
        ))
        if len(row) == 2:  
            buttons.append(row)
            row = []
    if row:  
        buttons.append(row)
    return types.InlineKeyboardMarkup(inline_keyboard=buttons)

def get_base_keyboard():
    return types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text="üìö –ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ", callback_data="start_learning")],
            [types.InlineKeyboardButton(text="üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="my_stats")],
            [types.InlineKeyboardButton(text="‚ÑπÔ∏è –û –±–æ—Ç–µ", callback_data="about")]
        ]
    )

def get_admin_keyboard():
    return types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text="üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_mailing")],
            [types.InlineKeyboardButton(text="‚ùì –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞–º–∏", callback_data="admin_questions")],
            [types.InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")]
        ]
    )

def get_learning_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ–±—É—á–µ–Ω–∏—è –±–µ–∑ –∫–Ω–æ–ø–∫–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ (–¥–ª—è –≤—Å–µ—Ö –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —ç–∫—Ä–∞–Ω–æ–≤)."""
    return types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text="üîÅ –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ", callback_data="review_mode")],
            [types.InlineKeyboardButton(text="üìö –í—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="select_category")],
            [types.InlineKeyboardButton(text="üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="my_stats")],
            [types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="start_learning")]
        ]
    )

def get_learning_keyboard_main():
    """–ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ–±—É—á–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–æ–π —Å–ª—É—á–∞–π–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ (—Ç–æ–ª—å–∫–æ –Ω–∞ –ø–µ—Ä–≤–æ–º —ç–∫—Ä–∞–Ω–µ)."""
    return types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text="üéØ –°–ª—É—á–∞–π–Ω—ã–π –≤–æ–ø—Ä–æ—Å", callback_data="random_question")],
            [types.InlineKeyboardButton(text="üîÅ –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ", callback_data="review_mode")],
            [types.InlineKeyboardButton(text="üìö –í—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="select_category")],
            [types.InlineKeyboardButton(text="üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="my_stats")],
            [types.InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
    )

def get_repeat_session_completed_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∫–æ–≥–¥–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –≤ —Å–µ—Å—Å–∏–∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å"""
    return types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text="üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Å–µ—Å—Å–∏—é", callback_data="restart_repeat_session")],
            [types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="start_learning")]
        ]
    )
async def admin_get_categories_keyboard():
    categories = await CategoryManager.get_all_categories()
    buttons = []
    row = []
    for category in categories:
        category_id, name, is_active = category
        status_emoji = "‚úÖ" if is_active else "‚ùå"
        button_text = f"{status_emoji} {name}"
        row.append(types.InlineKeyboardButton(text=button_text, callback_data=f"admin_category_{category_id}"))
        if len(row) == 1:
            buttons.append(row)
            row = []
    if row:
        buttons.append(row)
    buttons.append([types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="admin")])
    return types.InlineKeyboardMarkup(inline_keyboard=buttons)

async def admin_get_categories_for_questions_keyboard():
    categories = await CategoryManager.get_all_categories()
    buttons = []
    row = []
    for category in categories:
        category_id, name, is_active = category
        status_emoji = "‚úÖ" if is_active else "‚ùå"
        button_text = f"{status_emoji} {name}"
        row.append(types.InlineKeyboardButton(text=button_text, callback_data=f"admin_qcat_{category_id}"))
        if len(row) == 1:
            buttons.append(row)
            row = []
    if row:
        buttons.append(row)
    buttons.append([types.InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="admin_add_category_q")])
    buttons.append([types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="admin")])
    return types.InlineKeyboardMarkup(inline_keyboard=buttons)

async def get_categories_keyboard():
    categories = await CategoryManager.get_available_categories()
    buttons = []
    row = []
    if not categories:
        buttons.append([types.InlineKeyboardButton(text="üìö –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã", callback_data="no_categories")])
    else:
        for category in categories:
            category_id, name = category
            button_text = f"{name}"
            row.append(types.InlineKeyboardButton(text=button_text, callback_data=f"category_{category_id}"))
            if len(row) == 2:
                buttons.append(row)
                row = []
        if row:
            buttons.append(row)
    buttons.append([types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="start_learning")])
    return types.InlineKeyboardMarkup(inline_keyboard=buttons)

def get_question_keyboard(answers):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤"""
    buttons = []
    for answer in answers:
        answer_id, answer_text, is_correct = answer
        buttons.append([types.InlineKeyboardButton(
            text=answer_text, 
            callback_data=f"answer_{answer_id}"
        )])
    return types.InlineKeyboardMarkup(inline_keyboard=buttons)

def get_question_navigation_keyboard(question_id, category_id):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞"""
    return types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text="üîÑ –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å", callback_data=f"next_question_{category_id}")],
            [types.InlineKeyboardButton(text="üìö –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="select_category")],
            [types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="start_learning")]
        ]
    )

async def admin_get_questions_keyboard(category_id):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞–º–∏ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    questions = await QuestionManager.get_all_questions_by_category(category_id)
    buttons = []
    
    if not questions:
        buttons.append([types.InlineKeyboardButton(text="–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤", callback_data="no_questions")])
    else:
        for question in questions:
            question_id, question_text, difficulty_level, is_active = question
            status_emoji = "‚úÖ" if is_active else "‚ùå"
            difficulty_emoji = {"beginner": "üü¢", "intermediate": "üü°", "advanced": "üî¥"}.get(difficulty_level, "‚ö™")
            button_text = f"{status_emoji} {difficulty_emoji} {question_text[:30]}..."
            buttons.append([types.InlineKeyboardButton(
                text=button_text, 
                callback_data=f"admin_question_{question_id}"
            )])
    
    buttons.append([types.InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data=f"admin_add_question_{category_id}")])
    buttons.append([types.InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data=f"delete_category_{category_id}")])
    buttons.append([types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="admin_questions")])
    return types.InlineKeyboardMarkup(inline_keyboard=buttons)

def get_difficulty_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏"""
    return types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text="üü¢ –ù–∞—á–∞–ª—å–Ω—ã–π", callback_data="difficulty_beginner")],
            [types.InlineKeyboardButton(text="üü° –°—Ä–µ–¥–Ω–∏–π", callback_data="difficulty_intermediate")],
            [types.InlineKeyboardButton(text="üî¥ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π", callback_data="difficulty_advanced")],
            [types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="admin_categories")]
        ]
    )

def get_question_management_keyboard(question_id):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –≤–æ–ø—Ä–æ—Å–æ–º"""
    return types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_question_{question_id}")],
            [types.InlineKeyboardButton(text="üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data=f"toggle_question_{question_id}")],
            [types.InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_question_{question_id}")],
            [types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="admin_questions")]
        ]
    )
