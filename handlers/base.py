from aiogram import F, types, Dispatcher
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from ..config import get_base_keyboard, get_categories_keyboard, get_learning_keyboard, get_learning_keyboard_main
from ..database.models import UserManager, ProgressManager

class BaseHandlers:
    def __init__(self, dp: Dispatcher):
        dp.message.register(self.start_cmd, Command("start"))
        dp.callback_query.register(self.start_learning, F.data == "start_learning")
        dp.callback_query.register(self.select_category, F.data == "select_category")
        dp.callback_query.register(self.random_question, F.data == "random_question")
        dp.callback_query.register(self.my_stats, F.data == "my_stats")
        dp.callback_query.register(self.about, F.data == "about")
        dp.callback_query.register(self.main_menu, F.data == "main_menu")

    async def start_cmd(self, message: types.Message, state: FSMContext):
        await state.clear()
        await UserManager.add_user(
            user_id=message.from_user.id,
            username=message.from_user.username,
            first_name=message.from_user.first_name,
            last_name=message.from_user.last_name
        )
        await message.answer(
            "üá∑üá∫ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞-—Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ –ø–æ —Ä—É—Å—Å–∫–æ–º—É —è–∑—ã–∫—É!\n\n"
            "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∏–∑—É—á–∞—Ç—å —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫, –ø—Ä–æ—Ö–æ–¥—è —Ç–µ—Å—Ç—ã –∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º —Ç–µ–º–∞–º.\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_base_keyboard()
        )
    async def start_learning(self, callback: types.CallbackQuery, state: FSMContext):
        await state.clear()
        # Ensure user is in DB for future broadcasts
        from ..database.models import UserManager
        await UserManager.add_user(
            user_id=callback.from_user.id,
            username=callback.from_user.username,
            first_name=callback.from_user.first_name,
            last_name=callback.from_user.last_name
        )
        await callback.message.edit_text(
            "üìö <b>–†–µ–∂–∏–º: –û–±—É—á–µ–Ω–∏–µ</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–±—É—á–µ–Ω–∏—è:",
            reply_markup=get_learning_keyboard_main(),
            parse_mode="HTML"
        )
        await callback.answer()

    async def select_category(self, callback: types.CallbackQuery, state: FSMContext):
        await state.clear()
        categories_keyboard = await get_categories_keyboard()
        await callback.message.edit_text(
            "üìö <b>–†–µ–∂–∏–º: –û–±—É—á–µ–Ω–∏–µ</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:",
            reply_markup=categories_keyboard,
            parse_mode="HTML"
        )
        await callback.answer()

    async def random_question(self, callback: types.CallbackQuery, state: FSMContext):
        await state.clear()
        from ..database.models import CategoryManager, QuestionManager
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –Ω–µ–≤–∏–¥–µ–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å –≥–ª–æ–±–∞–ª—å–Ω–æ
        question_data = await QuestionManager.get_unseen_random_question_global(callback.from_user.id)
        if not question_data:
            await callback.message.edit_text(
                "üìö <b>–†–µ–∂–∏–º: –û–±—É—á–µ–Ω–∏–µ</b>\n\nüìö –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ—Ç –Ω–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤. –í—Å–µ —É–∂–µ –ø—Ä–æ–π–¥–µ–Ω—ã.",
                reply_markup=get_learning_keyboard(),
                parse_mode="HTML"
            )
            await callback.answer()
            return
        # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ, –≤—ã—Ç—è–Ω–µ–º category_id
        from ..database.models import aiosqlite, DB_PATH
        async with aiosqlite.connect(DB_PATH) as conn:
            async with conn.execute('SELECT category_id FROM questions WHERE id = ?', (question_data['question'][0],)) as cur:
                row = await cur.fetchone()
                category_id = row[0] if row else None
        await self.show_question(callback, question_data, category_id, state)
        await callback.answer()


    async def show_question(self, callback: types.CallbackQuery, question_data, category_id, state: FSMContext = None):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–æ–ø—Ä–æ—Å —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤"""
        from ..config.keyboards import get_question_keyboard, get_question_navigation_keyboard
        
        question = question_data['question']
        answers = question_data['answers']
        
        question_id, question_text, difficulty_level, explanation = question
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å–∞ –≤ state –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–≤–µ—Ç–∞
        is_repeat_mode = False
        if state:
            data = await state.get_data()
            is_repeat_mode = data.get('is_repeat_mode', False)
            await state.update_data(
                current_question_id=question_id,
                current_category_id=category_id,
                correct_answer_id=None,
                is_repeat_mode=is_repeat_mode
            )
            
            # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
            for answer in answers:
                if answer[2]:  # is_correct
                    await state.update_data(correct_answer_id=answer[0])
                    break
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å —Ä–µ–∂–∏–º–∞ –∏ —ç–º–æ–¥–∑–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        difficulty_emoji = {"beginner": "üü¢", "intermediate": "üü°", "advanced": "üî¥"}.get(difficulty_level, "‚ö™")
        mode_text = "üîÅ <b>–†–µ–∂–∏–º: –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ</b>" if is_repeat_mode else "üìö <b>–†–µ–∂–∏–º: –û–±—É—á–µ–Ω–∏–µ</b>"
        text = f"{mode_text}\n\n{difficulty_emoji} <b>–í–æ–ø—Ä–æ—Å:</b>\n\n{question_text}"
        
        await callback.message.edit_text(
            text,
            reply_markup=get_question_keyboard(answers),
            parse_mode="HTML"
        )



    async def my_stats(self, callback: types.CallbackQuery, state: FSMContext):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"""
        from ..database.models import ProgressManager
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        overall_progress = await ProgressManager.get_user_overall_progress(callback.from_user.id)
        category_stats = await ProgressManager.get_user_stats_by_categories(callback.from_user.id)
         
        if not overall_progress:
            await callback.message.edit_text(
                "üìä –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ù–∞—á–Ω–∏—Ç–µ –∏–∑—É—á–µ–Ω–∏–µ!",
                reply_markup=get_learning_keyboard()
            )
            await callback.answer()
            return
        
        stats_text = f"üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:</b>\n\n"
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats_text += f"üéØ <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        stats_text += f"‚Ä¢ –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {overall_progress['total_questions_answered']}\n"
        stats_text += f"‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {overall_progress['total_correct_answers']}\n"
        stats_text += f"‚Ä¢ –¢–æ—á–Ω–æ—Å—Ç—å: {overall_progress['accuracy']}%\n"
        stats_text += f"‚Ä¢ –ò–∑—É—á–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {overall_progress['categories_studied']}\n\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        if category_stats:
            stats_text += f"üìö <b>–ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:</b>\n"
            for category_name, total_questions_answered, total_correct_answers, accuracy in category_stats:
                stats_text += f"‚Ä¢ <b>{category_name}:</b> {total_correct_answers}/{total_questions_answered} ({accuracy}%)\n"
        else:
            stats_text += f"üìö <b>–ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:</b>\n‚Ä¢ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º\n"
        
        await callback.message.edit_text(
            stats_text,
            reply_markup=get_learning_keyboard(),
            parse_mode="HTML"
        )
        await callback.answer()

    async def about(self, callback: types.CallbackQuery, state: FSMContext):
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ"""
        about_text = (
            "‚ÑπÔ∏è <b>–û –±–æ—Ç–µ-—Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–µ –ø–æ —Ä—É—Å—Å–∫–æ–º—É —è–∑—ã–∫—É</b>\n\n"
            "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –∏–∑—É—á–∞—Ç—å —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫ —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã –∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã.\n\n"
            "üéØ <b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>\n"
            "‚Ä¢ –ü—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤ –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º —Ç–µ–º–∞–º\n"
            "‚Ä¢ –°–ª—É—á–∞–π–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è\n"
            "‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ–±—É—á–µ–Ω–∏—è\n"
            "‚Ä¢ –†–∞–∑–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏\n\n"
            "üìö <b>–ö–∞–∫ –Ω–∞—á–∞—Ç—å:</b>\n"
            "1. –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è\n"
            "2. –û—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã\n"
            "3. –°–ª–µ–¥–∏—Ç–µ –∑–∞ —Å–≤–æ–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º\n\n"
            "–£–¥–∞—á–∏ –≤ –∏–∑—É—á–µ–Ω–∏–∏ —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞! üá∑üá∫"
        )
        
        await callback.message.edit_text(
            about_text,
            reply_markup=get_base_keyboard(),
            parse_mode="HTML"
        )
        await callback.answer()

    async def main_menu(self, callback: types.CallbackQuery, state: FSMContext):
        """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        await state.clear()
        await callback.message.edit_text(
            "üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_base_keyboard(),
            parse_mode="HTML"
        )
        await callback.answer()