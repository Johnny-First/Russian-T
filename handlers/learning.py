from aiogram import F, types, Dispatcher
from aiogram.fsm.context import FSMContext
from ..database.models import CategoryManager, QuestionManager, ProgressManager
from ..config.keyboards import (
    get_learning_keyboard, 
    get_categories_keyboard,
    get_question_keyboard,
    get_question_navigation_keyboard,
    get_repeat_session_completed_keyboard
)

class LearningHandlers:
    def __init__(self, dp: Dispatcher):
        dp.callback_query.register(self.start_learning, F.data == "start_learning")
        dp.callback_query.register(self.select_category, F.data == "select_category")
        dp.callback_query.register(self.random_question, F.data == "random_question")
        dp.callback_query.register(self.review_mode, F.data == "review_mode")
        dp.callback_query.register(self.restart_repeat_session, F.data == "restart_repeat_session")
        dp.callback_query.register(self.my_stats, F.data == "my_stats")
        dp.callback_query.register(self.category_selected, F.data.startswith("category_"))
        dp.callback_query.register(self.answer_question, F.data.startswith("answer_"))
        dp.callback_query.register(self.next_question, F.data.startswith("next_question_"))

    async def start_learning(self, callback: types.CallbackQuery, state: FSMContext):
        await state.clear()
        await callback.message.edit_text(
            "üìö <b>–†–µ–∂–∏–º: –û–±—É—á–µ–Ω–∏–µ</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–±—É—á–µ–Ω–∏—è:",
            reply_markup=get_learning_keyboard(),
            parse_mode="HTML"
        )
        await callback.answer()

    async def select_category(self, callback: types.CallbackQuery, state: FSMContext):
        await state.clear()
        categories_keyboard = await get_categories_keyboard()
        await callback.message.edit_text(
            "üìö <b>–†–µ–∂–∏–º: –û–±—É—á–µ–Ω–∏–µ</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:",
            reply_markup=categories_keyboard,
            parse_mode="HTML"
        )
        await callback.answer()

    async def random_question(self, callback: types.CallbackQuery, state: FSMContext):
        await state.clear()
        
        # –ì–ª–æ–±–∞–ª—å–Ω–æ —Å–ª—É—á–∞–π–Ω—ã–π –Ω–µ–≤–∏–¥–µ–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å
        question_data = await QuestionManager.get_unseen_random_question_global(callback.from_user.id)
        if not question_data:
            await callback.message.edit_text(
                "üìö <b>–†–µ–∂–∏–º: –û–±—É—á–µ–Ω–∏–µ</b>\n\nüìö –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ—Ç –Ω–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤. –í—Å–µ —É–∂–µ –ø—Ä–æ–π–¥–µ–Ω—ã.",
                reply_markup=get_learning_keyboard(),
                parse_mode="HTML"
            )
            await callback.answer()
            return
        # –Ω–∞–π—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        from ..database.models import aiosqlite, DB_PATH
        async with aiosqlite.connect(DB_PATH) as conn:
            async with conn.execute('SELECT category_id FROM questions WHERE id = ?', (question_data['question'][0],)) as cur:
                row = await cur.fetchone()
                category_id = row[0] if row else None
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∂–∏–º –æ–±—É—á–µ–Ω–∏—è –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
        await state.update_data(is_repeat_mode=False)
        await self.show_question(callback, question_data, category_id, state)
        await callback.answer()

    async def review_mode(self, callback: types.CallbackQuery, state: FSMContext):
        await state.clear()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∂–∏–º –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é
        await state.update_data(
            is_repeat_mode=True,
            repeat_session_answered_questions=[]  # –°–ø–∏—Å–æ–∫ ID –≤–æ–ø—Ä–æ—Å–æ–≤, –æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –≤ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
        from ..config.keyboards import get_categories_keyboard
        await callback.message.edit_text(
            "üîÅ <b>–†–µ–∂–∏–º: –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤:",
            reply_markup=await get_categories_keyboard(),
            parse_mode="HTML"
        )
        await callback.answer()

    async def restart_repeat_session(self, callback: types.CallbackQuery, state: FSMContext):
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Å—Å–∏–∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è"""
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ—Å—Å–∏–∏
        await state.update_data(repeat_session_answered_questions=[])
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
        await callback.message.edit_text(
            "üîÅ <b>–†–µ–∂–∏–º: –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤:",
            reply_markup=await get_categories_keyboard(),
            parse_mode="HTML"
        )
        await callback.answer()

    async def category_selected(self, callback: types.CallbackQuery, state: FSMContext):
        category_id = int(callback.data.split("_")[1])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
        data = await state.get_data()
        is_repeat_mode = data.get('is_repeat_mode', False)
        
        if is_repeat_mode:
            # –í —Ä–µ–∂–∏–º–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –æ—Ç–≤–µ—á–∞–ª–∏, –∏—Å–∫–ª—é—á–∞—è —É–∂–µ –ø–æ–∫–∞–∑–∞–Ω–Ω—ã–µ –≤ —Å–µ—Å—Å–∏–∏
            answered_in_session = data.get('repeat_session_answered_questions', [])
            question_data = await QuestionManager.get_random_question_by_category_answered_excluding(
                callback.from_user.id, category_id, answered_in_session
            )
            if not question_data:
                # –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –≤ —Å–µ—Å—Å–∏–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
                await callback.message.edit_text(
                    "üîÅ <b>–†–µ–∂–∏–º: –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ</b>\n\nüéâ <b>–ú–æ–ª–æ–¥–µ—Ü! –í—ã –≤—Å–µ –ø–æ–≤—Ç–æ—Ä–∏–ª–∏!</b>\n\n–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–æ–ª—å—à–µ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –≤ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏.",
                    reply_markup=get_repeat_session_completed_keyboard(),
                    parse_mode="HTML"
                )
                await callback.answer()
                return
        else:
            # –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
            question_data = await QuestionManager.get_unseen_random_question_by_category(callback.from_user.id, category_id)
            
            if not question_data:
                await callback.message.edit_text(
                    "üìö <b>–†–µ–∂–∏–º: –û–±—É—á–µ–Ω–∏–µ</b>\n\nüìö –í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤.",
                    reply_markup=get_learning_keyboard(),
                    parse_mode="HTML"
                )
                await callback.answer()
                return
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å–∞ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        question = question_data['question']
        answers = question_data['answers']
        question_id, question_text, difficulty_level, explanation = question
        
        # –í —Ä–µ–∂–∏–º–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –¥–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –≤ —Å–µ—Å—Å–∏—é —Å—Ä–∞–∑—É –ø—Ä–∏ –ø–æ–∫–∞–∑–µ
        if is_repeat_mode:
            answered_in_session = data.get('repeat_session_answered_questions', [])
            if question_id not in answered_in_session:
                answered_in_session.append(question_id)
                await state.update_data(repeat_session_answered_questions=answered_in_session)
        
        await state.update_data(
            current_question_id=question_id,
            current_category_id=category_id,
            correct_answer_id=None,
            is_repeat_mode=is_repeat_mode
        )
        for answer in answers:
            if answer[2]:
                await state.update_data(correct_answer_id=answer[0])
                break
        
        difficulty_emoji = {"beginner": "üü¢", "intermediate": "üü°", "advanced": "üî¥"}.get(difficulty_level, "‚ö™")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å —Ä–µ–∂–∏–º–∞
        mode_text = "üîÅ <b>–†–µ–∂–∏–º: –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ</b>" if is_repeat_mode else "üìö <b>–†–µ–∂–∏–º: –û–±—É—á–µ–Ω–∏–µ</b>"
        text = f"{mode_text}\n\n{difficulty_emoji} <b>–í–æ–ø—Ä–æ—Å:</b>\n\n{question_text}"
        
        await callback.message.edit_text(
            text,
            reply_markup=get_question_keyboard(answers),
            parse_mode="HTML"
        )
        await callback.answer()

    async def show_question(self, callback: types.CallbackQuery, question_data, category_id, state: FSMContext = None):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–æ–ø—Ä–æ—Å —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤"""
        from ..config.keyboards import get_question_keyboard, get_question_navigation_keyboard
        
        question = question_data['question']
        answers = question_data['answers']
        
        question_id, question_text, difficulty_level, explanation = question
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å–∞ –≤ state –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–≤–µ—Ç–∞
        is_repeat_mode = False
        if state:
            data = await state.get_data()
            is_repeat_mode = data.get('is_repeat_mode', False)
            
            # –í —Ä–µ–∂–∏–º–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –¥–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –≤ —Å–µ—Å—Å–∏—é —Å—Ä–∞–∑—É –ø—Ä–∏ –ø–æ–∫–∞–∑–µ
            if is_repeat_mode:
                answered_in_session = data.get('repeat_session_answered_questions', [])
                if question_id not in answered_in_session:
                    answered_in_session.append(question_id)
                    await state.update_data(repeat_session_answered_questions=answered_in_session)
            
            await state.update_data(
                current_question_id=question_id,
                current_category_id=category_id,
                correct_answer_id=None,
                is_repeat_mode=is_repeat_mode
            )
            
            # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
            for answer in answers:
                if answer[2]:  # is_correct
                    await state.update_data(correct_answer_id=answer[0])
                    break
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å —Ä–µ–∂–∏–º–∞ –∏ —ç–º–æ–¥–∑–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        difficulty_emoji = {"beginner": "üü¢", "intermediate": "üü°", "advanced": "üî¥"}.get(difficulty_level, "‚ö™")
        mode_text = "üîÅ <b>–†–µ–∂–∏–º: –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ</b>" if is_repeat_mode else "üìö <b>–†–µ–∂–∏–º: –û–±—É—á–µ–Ω–∏–µ</b>"
        text = f"{mode_text}\n\n{difficulty_emoji} <b>–í–æ–ø—Ä–æ—Å:</b>\n\n{question_text}"
        
        await callback.message.edit_text(
            text,
            reply_markup=get_question_keyboard(answers),
            parse_mode="HTML"
        )

    async def answer_question(self, callback: types.CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≤–æ–ø—Ä–æ—Å"""
        token = callback.data.split("_", 1)[1]
        if not token.isdigit():
            await callback.answer()
            return
        answer_id = int(token)
        
        data = await state.get_data()
        question_id = data.get('current_question_id')
        correct_answer_id = data.get('correct_answer_id')
        
        if not question_id or correct_answer_id is None:
            await callback.answer("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
            return
        
        is_correct = answer_id == correct_answer_id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º
        is_repeat_mode = data.get('is_repeat_mode', False)
        if is_repeat_mode:
            # –í —Ä–µ–∂–∏–º–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –ù–ï –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ë–î, –ù–ï –∏–∑–º–µ–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            pass
        else:
            # –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º - –ø—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–≤–µ—á–∞–ª –ª–∏ —É–∂–µ –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å
            from ..database.models import ProgressManager, UserManager
            already_answered = await ProgressManager.user_has_answered_question(callback.from_user.id, question_id)
            
            if not already_answered:
                # –ü–µ—Ä–≤—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å - –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                await ProgressManager.record_answer(callback.from_user.id, question_id, answer_id, is_correct)
                await UserManager.update_user_stats(callback.from_user.id, is_correct)
                
                # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ—Ç –∂–µ –≤–æ–ø—Ä–æ—Å —Å–Ω–æ–≤–∞
                if not is_correct:
                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –æ—Ç–≤–µ—Ç–µ
                    question_data = await QuestionManager.get_question_with_answers(question_id)
                    correct_answer_text = None
                    for answer in question_data['answers']:
                        if answer[2]:  # is_correct
                            correct_answer_text = answer[1]
                            break
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
                    result_text = f"‚ùå <b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!</b>\n\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer_text}"
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
                    question = question_data['question']
                    if question[3]:  # explanation
                        result_text += f"\n\nüí° <b>–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:</b>\n{question[3]}"
                    
                    result_text += f"\n\nüîÑ <b>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:</b>"
                    
                    await callback.message.edit_text(
                        result_text,
                        reply_markup=get_question_keyboard(question_data['answers']),
                        parse_mode="HTML"
                    )
                    await callback.answer()
                    return
            else:
                # –£–∂–µ –æ—Ç–≤–µ—á–∞–ª –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å - –Ω–µ –∏–∑–º–µ–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                # –ù–æ –µ—Å–ª–∏ —Å–µ–π—á–∞—Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ, –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
                if is_correct:
                    from ..database.models import aiosqlite, DB_PATH
                    async with aiosqlite.connect(DB_PATH) as conn:
                        await conn.execute(
                            'INSERT INTO user_answers (user_id, question_id, answer_id, is_correct) VALUES (?, ?, ?, 1)',
                            (callback.from_user.id, question_id, answer_id)
                        )
                        await conn.commit()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –æ—Ç–≤–µ—Ç–µ
        question_data = await QuestionManager.get_question_with_answers(question_id)
        correct_answer_text = None
        for answer in question_data['answers']:
            if answer[2]:  # is_correct
                correct_answer_text = answer[1]
                break
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        if is_correct:
            result_text = "‚úÖ <b>–ü—Ä–∞–≤–∏–ª—å–Ω–æ!</b>"
        else:
            result_text = f"‚ùå <b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!</b>\n\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer_text}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
        question = question_data['question']
        if question[3]:  # explanation
            result_text += f"\n\nüí° <b>–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:</b>\n{question[3]}"
        
        await callback.message.edit_text(
            result_text,
            reply_markup=get_question_navigation_keyboard(question_id, data.get('current_category_id')),
            parse_mode="HTML"
        )
        await callback.answer()

    async def next_question(self, callback: types.CallbackQuery, state: FSMContext):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å"""
        data = await state.get_data()
        is_repeat_mode = data.get('is_repeat_mode', False)
        category_id = data.get('current_category_id')
        
        if not category_id:
            await callback.message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é.",
                reply_markup=get_learning_keyboard()
            )
            await callback.answer()
            return
        
        if is_repeat_mode:
            # –í —Ä–µ–∂–∏–º–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –æ—Ç–≤–µ—á–∞–ª–∏, –∏—Å–∫–ª—é—á–∞—è —É–∂–µ –ø–æ–∫–∞–∑–∞–Ω–Ω—ã–µ –≤ —Å–µ—Å—Å–∏–∏
            answered_in_session = data.get('repeat_session_answered_questions', [])
            question_data = await QuestionManager.get_random_question_by_category_answered_excluding(
                callback.from_user.id, category_id, answered_in_session
            )
            if not question_data:
                # –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –≤ —Å–µ—Å—Å–∏–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
                await callback.message.edit_text(
                    "üîÅ <b>–†–µ–∂–∏–º: –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ</b>\n\nüéâ <b>–ú–æ–ª–æ–¥–µ—Ü! –í—ã –≤—Å–µ –ø–æ–≤—Ç–æ—Ä–∏–ª–∏!</b>\n\n–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–æ–ª—å—à–µ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –≤ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏.",
                    reply_markup=get_repeat_session_completed_keyboard(),
                    parse_mode="HTML"
                )
                await callback.answer()
                return
        else:
            # –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
            question_data = await QuestionManager.get_unseen_random_question_by_category(callback.from_user.id, category_id)
            
            if not question_data:
                await callback.message.edit_text(
                    "üìö <b>–†–µ–∂–∏–º: –û–±—É—á–µ–Ω–∏–µ</b>\n\nüìö –í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–æ–ª—å—à–µ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤.",
                    reply_markup=get_learning_keyboard(),
                    parse_mode="HTML"
                )
                await callback.answer()
                return
        
        await self.show_question(callback, question_data, category_id, state)
        await callback.answer()

    async def my_stats(self, callback: types.CallbackQuery, state: FSMContext):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"""
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        overall_progress = await ProgressManager.get_user_overall_progress(callback.from_user.id)
        category_stats = await ProgressManager.get_user_stats_by_categories(callback.from_user.id)
         
        if not overall_progress or not category_stats:
            await callback.message.edit_text(
                "üìä –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ù–∞—á–Ω–∏—Ç–µ –∏–∑—É—á–µ–Ω–∏–µ!",
                reply_markup=get_learning_keyboard()
            )
            await callback.answer()
            return
        
        stats_text = f"üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:</b>\n\n"
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats_text += f"üéØ <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        stats_text += f"‚Ä¢ –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {overall_progress['total_questions_answered']}\n"
        stats_text += f"‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {overall_progress['total_correct_answers']}\n"
        stats_text += f"‚Ä¢ –¢–æ—á–Ω–æ—Å—Ç—å: {overall_progress['accuracy']}%\n"
        stats_text += f"‚Ä¢ –ò–∑—É—á–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {overall_progress['categories_studied']}\n\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        stats_text += f"üìö <b>–ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:</b>\n"
        for category_name, total_questions_answered, total_correct_answers, accuracy in category_stats:
            stats_text += f"‚Ä¢ <b>{category_name}:</b> {total_correct_answers}/{total_questions_answered} ({accuracy}%)\n"
        
        await callback.message.edit_text(
            stats_text,
            reply_markup=get_learning_keyboard(),
            parse_mode="HTML"
        )
        await callback.answer()
