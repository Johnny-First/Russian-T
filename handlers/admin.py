
from aiogram.fsm.state import StatesGroup, State
from aiogram import F, types, Dispatcher
from aiogram.filters import Command  
from ..config import get_base_keyboard, get_my_keyboard, admin_get_categories_keyboard, admin_get_questions_keyboard, get_difficulty_keyboard, get_question_management_keyboard
from ..config.keyboards import admin_get_categories_for_questions_keyboard
import sqlite3
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from ..database.models import QuestionManager, CategoryManager, ProgressManager
from ..config import get_admin_keyboard
from ..config.settings import settings

class AdminStates(StatesGroup):
    waiting_broadcast = State() 
    waiting_new_category_name = State()
    waiting_new_category_description = State()
    waiting_new_category_difficulty = State()
    waiting_question_text = State()
    waiting_question_explanation = State()
    waiting_question_difficulty = State()
    waiting_answer_text = State()
    waiting_answer_correct = State()
    waiting_category_delete = State()
    waiting_question_delete = State()
    waiting_question_edit = State()
    edit_question_id = State()
    edit_question_text = State()
    edit_question_explanation = State()
    edit_question_difficulty = State()
    edit_draft_answers = State()

class AdminHandlers:
    def __init__(self, dp: Dispatcher):
        self.admin_ids = settings.get_admin_ids()

        dp.message.register(self.admin_panel, Command("admin"))
        dp.callback_query.register(self.admin_panel_callback, F.data == "admin")        

        # Handle only top-level admin actions; do not swallow more specific admin_* callbacks
        dp.callback_query.register(
            self.admin_action_callback,
            (
                F.data == "admin_mailing"
            ) | (
                F.data == "admin_questions"
            ) | (
                F.data == "admin_stats"
            )
        )

        dp.message.register(
            self.broadcast_message,
            StateFilter(AdminStates.waiting_broadcast)
        )
        dp.message.register(
            self.process_new_category_name,
            StateFilter(AdminStates.waiting_new_category_name)
        )
        dp.message.register(
            self.process_new_category_description,
            StateFilter(AdminStates.waiting_new_category_description)
        )
        dp.message.register(
            self.process_question_text,
            StateFilter(AdminStates.waiting_question_text)
        )
        dp.message.register(
            self.process_question_explanation,
            StateFilter(AdminStates.waiting_question_explanation)
        )
        dp.message.register(
            self.process_answer_text,
            StateFilter(AdminStates.waiting_answer_text)
        )
        
        # Callback handlers
        dp.callback_query.register(
            self.process_difficulty_selection,
            F.data.startswith("difficulty_")
        )
        dp.callback_query.register(
            self.add_more_answer,
            F.data == "admin_add_more_answer"
        )
        dp.callback_query.register(
            self.finish_question_creation,
            F.data == "finish_question"
        )
        dp.callback_query.register(
            self.start_pick_correct_answer,
            F.data == "admin_pick_correct"
        )
        dp.callback_query.register(
            self.set_correct_answer,
            F.data.startswith("admin_set_correct_")
        )
        dp.callback_query.register(
            self.add_category_for_questions,
            F.data == "admin_add_category_q"
        )
        dp.callback_query.register(
            self.delete_category_from_questions,
            F.data.startswith("delete_category_")
        )
        dp.callback_query.register(
            self.process_category_selection,
            F.data.startswith("admin_category_")
        )
        dp.callback_query.register(
            self.process_questions_category_selection,
            F.data.startswith("admin_qcat_")
        )
        dp.callback_query.register(
            self.process_question_selection,
            F.data.startswith("admin_question_")
        )
        dp.callback_query.register(
            self.process_question_management,
            F.data.startswith("edit_question_") | F.data.startswith("toggle_question_") | F.data.startswith("delete_question_")
        )
        dp.callback_query.register(
            self.process_add_question,
            F.data.startswith("admin_add_question_")
        )
        
    async def start_pick_correct_answer(self, callback: types.CallbackQuery, state: FSMContext):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –∏ –¥–∞—Ç—å –≤—ã–±—Ä–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π"""
        data = await state.get_data()
        draft_answers = data.get('draft_answers', [])
        if len(draft_answers) < 2:
            await callback.answer("–ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –≤–∞—Ä–∏–∞–Ω—Ç–∞", show_alert=True)
            return
        buttons = []
        for idx, text in enumerate(draft_answers):
            label = f"{idx+1}. {text[:30]}" + ("..." if len(text) > 30 else "")
            buttons.append([types.InlineKeyboardButton(text=label, callback_data=f"admin_set_correct_{idx}")])
        buttons.append([types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_add_more_answer")])
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=buttons)
        )
        await callback.answer()

    async def set_correct_answer(self, callback: types.CallbackQuery, state: FSMContext):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç—ã –≤ –ë–î, –ø–æ–º–µ—Ç–∏–≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π"""
        idx_str = callback.data.split("_")[-1]
        if not idx_str.isdigit():
            await callback.answer()
            return
        idx = int(idx_str)
        data = await state.get_data()
        draft_answers = data.get('draft_answers', [])
        question_id = data.get('current_question_id')
        is_edit = data.get('is_edit')
        if idx < 0 or idx >= len(draft_answers) or not question_id:
            await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä", show_alert=True)
            return
        # –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å –æ—Ç–≤–µ—Ç—ã, –µ—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        if is_edit:
            await QuestionManager.delete_answers_for_question(question_id)
        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—Å–µ –æ—Ç–≤–µ—Ç—ã
        for i, text in enumerate(draft_answers):
            await QuestionManager.add_answer(question_id, text, is_correct=(i == idx))
        
        # –ü–æ–ª—É—á–∏—Ç—å –∏—Ç–æ–≥–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å —Å –æ—Ç–≤–µ—Ç–∞–º–∏ –¥–ª—è —Å–≤–æ–¥–∫–∏
        question_data = await QuestionManager.get_question_with_answers(question_id)
        question = question_data['question'] if question_data else None
        answers = question_data['answers'] if question_data else []
        
        # –°–æ–±—Ä–∞—Ç—å —Ç–µ–∫—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        title = "‚úÖ <b>–í–æ–ø—Ä–æ—Å –æ–±–Ω–æ–≤–ª—ë–Ω</b>\n\n" if is_edit else "‚úÖ <b>–í–æ–ø—Ä–æ—Å –¥–æ–±–∞–≤–ª–µ–Ω</b>\n\n"
        summary_text = title
        if question:
            summary_text += f"<b>–í–æ–ø—Ä–æ—Å:</b> {question[1]}\n"
            summary_text += f"<b>–°–ª–æ–∂–Ω–æ—Å—Ç—å:</b> {question[2]}\n\n"
        summary_text += "<b>–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤:</b>\n"
        for i, a in enumerate(answers, 1):
            correct_mark = "‚úÖ" if a[2] else "‚ùå"
            summary_text += f"{i}. {correct_mark} {a[1]}\n"
        
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        category_id = data.get('question_category_id') or data.get('selected_category_id')
        nav_keyboard = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [types.InlineKeyboardButton(text="üìã –ö –≤–æ–ø—Ä–æ—Å–∞–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data=(f"admin_qcat_{category_id}" if category_id else "admin_questions"))],
                [types.InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë –≤–æ–ø—Ä–æ—Å", callback_data=(f"admin_add_question_{category_id}" if category_id else "admin_questions"))],
                [types.InlineKeyboardButton(text="üè† –ê–¥–º–∏–Ω", callback_data="admin")],
            ]
        )
        
        await callback.message.edit_text(
            summary_text,
            reply_markup=nav_keyboard,
            parse_mode="HTML"
        )
        await state.clear()
        await callback.answer()
        
    async def admin_panel(self, message: types.Message, state: FSMContext):
        await state.clear()        
        if message.from_user.id not in self.admin_ids:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
            return
        await message.answer(
            "–ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —Å–¥–µ–ª–∞—Ç—å, –∞–¥–º–∏–Ω?",
            reply_markup=get_admin_keyboard()
        )

    async def admin_panel_callback(self, callback: types.CallbackQuery, state: FSMContext):     
        await state.clear()           
        if callback.from_user.id not in self.admin_ids:
            await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏", show_alert=True)
            return
        await callback.message.edit_text(
            "–ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —Å–¥–µ–ª–∞—Ç—å, –∞–¥–º–∏–Ω?",
            reply_markup=get_admin_keyboard()
        )
 

    async def admin_action_callback(self, callback: types.CallbackQuery, state: FSMContext):
        await state.clear()
        data = "_".join(callback.data.split("_")[1:])
        if callback.from_user.id not in self.admin_ids:
            await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
            return
        
        if data == "mailing":
            await callback.message.answer(
                "üì¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.\n\nüí° –í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Å –ø–æ–¥–ø–∏—Å—å—é - –æ–Ω–∞ –±—É–¥–µ—Ç —Ä–∞–∑–æ—Å–ª–∞–Ω–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.", 
                reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="admin")]])
            )
            await state.set_state(AdminStates.waiting_broadcast)
            await callback.answer()
            
        elif data == "questions":
            await callback.message.edit_text(
                "‚ùì –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞–º–∏. –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
                reply_markup=await admin_get_categories_for_questions_keyboard()
            )
            await callback.answer()
            
        elif data == "stats":
            await self.show_admin_stats(callback)
            await callback.answer()
            
        elif data == "add_category":
            await callback.message.edit_text(
                "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:",
                reply_markup=types.InlineKeyboardMarkup(
                    inline_keyboard=[[
                        types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="admin_questions")
                    ]]
                )
            )
            await state.set_state(AdminStates.waiting_new_category_name)
            await callback.answer()
        
        else:
            await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ", show_alert=True)

    async def process_category_selection(self, callback: types.CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
        category_id = int(callback.data.split("_")[2])
        await state.update_data(selected_category_id=category_id)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π
        category = await CategoryManager.get_category_by_id(category_id)
        if category:
            category_id, name, description = category
            text = f"üìö <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {name}</b>\n\n"
            text += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n"
            text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
            
            keyboard = types.InlineKeyboardMarkup(
                inline_keyboard=[
                    [types.InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_category_{category_id}")],
                    [types.InlineKeyboardButton(text="üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data=f"toggle_category_{category_id}")],
                    [types.InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_category_{category_id}")],
                    [types.InlineKeyboardButton(text="‚ùì –£–ø—Ä–∞–≤–ª—è—Ç—å –≤–æ–ø—Ä–æ—Å–∞–º–∏", callback_data=f"manage_questions_{category_id}")],
                    [types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="admin_categories")]
                ]
            )
            
            await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        
        await callback.answer()

    async def process_question_selection(self, callback: types.CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–æ–ø—Ä–æ—Å–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
        question_id = int(callback.data.split("_")[2])
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ–ø—Ä–æ—Å–µ
        question_data = await QuestionManager.get_question_with_answers(question_id)
        if question_data:
            question = question_data['question']
            answers = question_data['answers']
            
            question_id, question_text, difficulty_level, explanation = question
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å
            is_active = await QuestionManager.get_question_status(question_id)
            status_emoji = "‚úÖ" if is_active else "‚ùå"
            text = f"{status_emoji} <b>–í–æ–ø—Ä–æ—Å:</b>\n{question_text}\n\n"
            text += f"üéØ –£—Ä–æ–≤–µ–Ω—å: {difficulty_level}\n"
            if explanation:
                text += f"üí° –û–±—ä—è—Å–Ω–µ–Ω–∏–µ: {explanation}\n\n"
            
            text += "<b>–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤:</b>\n"
            for i, answer in enumerate(answers, 1):
                answer_id, answer_text, is_correct = answer
                correct_mark = "‚úÖ" if is_correct else "‚ùå"
                text += f"{i}. {correct_mark} {answer_text}\n"
            
            # –°–æ–∑–¥–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π –ù–∞–∑–∞–¥
            data = await state.get_data()
            category_id = data.get('selected_category_id')
            keyboard = types.InlineKeyboardMarkup(
                inline_keyboard=[
                    [types.InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_question_{question_id}")],
                    [types.InlineKeyboardButton(text="üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data=f"toggle_question_{question_id}")],
                    [types.InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_question_{question_id}")],
                    [types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data=(f"admin_qcat_{category_id}" if category_id else "admin_questions"))],
                ]
            )
            
            await callback.message.edit_text(
                text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
        
        await callback.answer()

    async def process_add_question(self, callback: types.CallbackQuery, state: FSMContext):
        """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞"""
        category_id = int(callback.data.split("_")[3])
        await state.update_data(question_category_id=category_id)
        
        await callback.message.edit_text(
            "‚ùì <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞</b>\n\nüìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞:",
            reply_markup=types.InlineKeyboardMarkup(
                inline_keyboard=[[
                    types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="admin_questions")
                ]]
            ),
            parse_mode="HTML"
        )
        await state.set_state(AdminStates.waiting_question_text)
        await callback.answer()

    async def process_question_management(self, callback: types.CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–º"""
        action = callback.data.split("_")[0]
        question_id = int(callback.data.split("_")[2])
        
        if action == "edit":
            # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ö–∞–Ω–∏–∑–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            data = await state.get_data()
            category_id = data.get('selected_category_id')
            await state.update_data(current_question_id=question_id, question_category_id=category_id, is_edit=True)
            await state.set_state(AdminStates.waiting_question_text)
            await callback.message.edit_text(
                "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞:",
                reply_markup=types.InlineKeyboardMarkup(
                    inline_keyboard=[[types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data=f"admin_question_{question_id}")]]
                )
            )
            await callback.answer()
            return
        elif action == "toggle":
            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –≤–æ–ø—Ä–æ—Å–∞ –Ω–∞–¥—ë–∂–Ω–æ
            current_status = await QuestionManager.get_question_status(question_id)
            await QuestionManager.update_question_status(question_id, not current_status)
            await callback.answer("–°—Ç–∞—Ç—É—Å –≤–æ–ø—Ä–æ—Å–∞ –∏–∑–º–µ–Ω–µ–Ω", show_alert=True)
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –≤–æ–ø—Ä–æ—Å–∞
            await self.process_question_selection(callback, state)
        elif action == "delete":
            await QuestionManager.delete_question(question_id)
            await callback.answer("–í–æ–ø—Ä–æ—Å —É–¥–∞–ª–µ–Ω", show_alert=True)
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –≤–æ–ø—Ä–æ—Å–æ–≤
            data = await state.get_data()
            category_id = data.get('selected_category_id')
            if category_id:
                await callback.message.edit_text(
                    "‚ùì –í–æ–ø—Ä–æ—Å—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:",
                    reply_markup=await admin_get_questions_keyboard(category_id)
                )
        
        await callback.answer()

    async def delete_category_from_questions(self, callback: types.CallbackQuery, state: FSMContext):
        """–£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞–º–∏"""
        category_id = int(callback.data.split("_")[2])
        await CategoryManager.delete_category(category_id)
        await callback.message.edit_text(
            "üìö –ö–∞—Ç–µ–≥–æ—Ä–∏—è —É–¥–∞–ª–µ–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            reply_markup=await admin_get_categories_for_questions_keyboard()
        )
        await callback.answer()

    async def process_questions_category_selection(self, callback: types.CallbackQuery, state: FSMContext):
        """–í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞–º–∏"""
        category_id = int(callback.data.split("_")[2])
        await state.update_data(selected_category_id=category_id)
        await callback.message.edit_text(
            "‚ùì –í–æ–ø—Ä–æ—Å—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:",
            reply_markup=await admin_get_questions_keyboard(category_id)
        )
        await callback.answer()

    async def process_new_category_name(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        category_name = message.text.strip()
        
        if len(category_name) == 0:
            await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å—Ä–∞–∑—É (–±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è)
        try:
            await CategoryManager.add_category(category_name)
            await message.answer(
                f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category_name}' –¥–æ–±–∞–≤–ª–µ–Ω–∞.",
                reply_markup=types.InlineKeyboardMarkup(
                    inline_keyboard=[[types.InlineKeyboardButton(text="–ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –≤–æ–ø—Ä–æ—Å–æ–≤", callback_data="admin_questions")]]
                )
            )
            await state.clear()
        except Exception as e:
            await message.answer(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {str(e)}",
                reply_markup=types.InlineKeyboardMarkup(
                    inline_keyboard=[[types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="admin_questions")]]
                )
            )

    async def process_new_category_description(self, message: types.Message, state: FSMContext):
        """(–ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)"""
        await state.clear()
        await message.answer(
            "–í–æ–∑–≤—Ä–∞—Ç –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –≤–æ–ø—Ä–æ—Å–æ–≤",
            reply_markup=types.InlineKeyboardMarkup(
                inline_keyboard=[[types.InlineKeyboardButton(text="–ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –≤–æ–ø—Ä–æ—Å–æ–≤", callback_data="admin_questions")]]
            )
        )
    async def add_category_for_questions(self, callback: types.CallbackQuery, state: FSMContext):
        """–°—Ç–∞—Ä—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –ø–∞–Ω–µ–ª–∏ –≤–æ–ø—Ä–æ—Å–æ–≤"""
        await callback.message.edit_text(
            "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:",
            reply_markup=types.InlineKeyboardMarkup(
                inline_keyboard=[[types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="admin_questions")]]
            )
        )
        await state.set_state(AdminStates.waiting_new_category_name)
        await callback.answer()

    async def process_difficulty_selection(self, callback: types.CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: –∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π, –∏ –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤"""
        difficulty = callback.data.split("_")[1]
        current_state = await state.get_state()

        # –í–µ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if current_state == AdminStates.waiting_new_category_difficulty.state:
            data = await state.get_data()
            category_name = data.get('category_name')
            category_description = data.get('category_description')
            try:
                await CategoryManager.add_category(category_name)
                await callback.message.edit_text(
                    f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!",
                    reply_markup=types.InlineKeyboardMarkup(
                        inline_keyboard=[[types.InlineKeyboardButton(text="–ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="admin_categories")]]
                    )
                )
                await state.clear()
            except Exception as e:
                await callback.message.edit_text(
                    f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {str(e)}",
                    reply_markup=types.InlineKeyboardMarkup(
                        inline_keyboard=[[types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="admin_categories")]]
                    )
                )
            await callback.answer()
            return

        # –í–µ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞
        if current_state == AdminStates.waiting_question_difficulty.state:
            data = await state.get_data()
            question_text = data.get('question_text')
            question_explanation = data.get('question_explanation')
            category_id = data.get('question_category_id')
            is_edit = data.get('is_edit')

            try:
                if is_edit:
                    # –û–±–Ω–æ–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å, –æ—Ç–≤–µ—Ç—ã –ø–µ—Ä–µ–∑–∞–ø–∏—à–µ–º –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ
                    question_id = data.get('current_question_id')
                    await QuestionManager.update_question(question_id, question_text, difficulty, question_explanation)
                    await state.update_data(draft_answers=[])
                else:
                    question_id = await QuestionManager.add_question(
                        question_text=question_text,
                        category_id=category_id,
                        difficulty_level=difficulty,
                        explanation=question_explanation,
                    )
                    await state.update_data(current_question_id=question_id, draft_answers=[])
                await callback.message.edit_text(
                    "üß© –¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤–∏–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞:",
                    reply_markup=types.InlineKeyboardMarkup(
                        inline_keyboard=[[types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="finish_question")]]
                    ),
                    parse_mode="HTML"
                )
                await state.set_state(AdminStates.waiting_answer_text)
            except Exception as e:
                await callback.message.edit_text(
                    f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞: {str(e)}",
                    reply_markup=types.InlineKeyboardMarkup(
                        inline_keyboard=[[types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="admin_questions")]]
                    )
                )
            await callback.answer()
            return

        await callback.answer("–ù–µ–≤–µ—Ä–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ", show_alert=True)

    async def add_more_answer(self, callback: types.CallbackQuery, state: FSMContext):
        """–ó–∞–ø—Ä–æ—Å–∏—Ç—å –≤–≤–æ–¥ –æ—á–µ—Ä–µ–¥–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞"""
        await callback.message.edit_text(
            "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞:",
            reply_markup=types.InlineKeyboardMarkup(
                inline_keyboard=[[types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="finish_question")]]
            ),
            parse_mode="HTML"
        )
        await state.set_state(AdminStates.waiting_answer_text)
        await callback.answer()

    async def finish_question_creation(self, callback: types.CallbackQuery, state: FSMContext):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –≤–æ–ø—Ä–æ—Å–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        data = await state.get_data()
        category_id = data.get('question_category_id') or data.get('selected_category_id')
        await state.clear()
        if category_id:
            await callback.message.edit_text(
                "‚ùì –í–æ–ø—Ä–æ—Å—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:",
                reply_markup=await admin_get_questions_keyboard(category_id)
            )
        else:
            await callback.message.edit_text(
                "‚ùì –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞–º–∏. –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
                reply_markup=await admin_get_categories_for_questions_keyboard()
            )
        await callback.answer()

    async def process_question_text(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –≤–æ–ø—Ä–æ—Å–∞"""
        question_text = message.text.strip()
        
        if len(question_text) == 0:
            await message.answer("–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return
        
        await state.update_data(question_text=question_text)
        await state.set_state(AdminStates.waiting_question_explanation)
        
        await message.answer(
            "üí° –í–≤–µ–¥–∏—Ç–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –∫ –≤–æ–ø—Ä–æ—Å—É (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):",
            reply_markup=types.InlineKeyboardMarkup(
                inline_keyboard=[[
                    types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="admin_questions")
                ]]
            )
        )

    async def process_question_explanation(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞"""
        explanation = message.text.strip() if message.text.strip() != "-" else None
        
        await state.update_data(question_explanation=explanation)
        await state.set_state(AdminStates.waiting_question_difficulty)
        
        await message.answer(
            "üéØ –í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –≤–æ–ø—Ä–æ—Å–∞:",
            reply_markup=get_difficulty_keyboard()
        )

    async def process_answer_text(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç–≤–µ—Ç–∞"""
        answer_text = message.text.strip()
        
        if len(answer_text) < 1:
            await message.answer("–¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return
        
        data = await state.get_data()
        draft_answers = data.get('draft_answers', [])
        draft_answers.append(answer_text)
        await state.update_data(draft_answers=draft_answers)

        summary = "\n".join([f"{idx+1}. {text}" for idx, text in enumerate(draft_answers)]) or "(–ø–æ–∫–∞ –ø—É—Å—Ç–æ)"
        await message.answer(
            f"üìã –¢–µ–∫—É—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤:\n{summary}",
            reply_markup=types.InlineKeyboardMarkup(
                inline_keyboard=[
                    [types.InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë", callback_data="admin_add_more_answer")],
                    [types.InlineKeyboardButton(text="‚úÖ –í—ã–±—Ä–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π", callback_data="admin_pick_correct")],
                    [types.InlineKeyboardButton(text="–ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="finish_question")],
                ]
            )
        )

    async def show_admin_stats(self, callback: types.CallbackQuery):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∞–¥–º–∏–Ω–∞"""
        try:
            stats = await ProgressManager.get_category_stats()
            
            if not stats:
                await callback.message.edit_text(
                    "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞",
                    reply_markup=types.InlineKeyboardMarkup(
                        inline_keyboard=[[
                            types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="admin")
                        ]]
                    )
                )
                return
            
            text = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:</b>\n\n"
            
            for stat in stats:
                name, difficulty, total_questions, users_studied = stat
                difficulty_emoji = {"beginner": "üü¢", "intermediate": "üü°", "advanced": "üî¥"}.get(difficulty, "‚ö™")
                text += f"{difficulty_emoji} <b>{name}</b>\n"
                text += f"   üìö –í–æ–ø—Ä–æ—Å–æ–≤: {total_questions}\n"
                text += f"   üë• –ò–∑—É—á–∞–ª–∏: {users_studied} —á–µ–ª.\n\n"
            
            await callback.message.edit_text(
                text,
                reply_markup=types.InlineKeyboardMarkup(
                    inline_keyboard=[[
                        types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="admin")
                    ]]
                ),
                parse_mode="HTML"
            )
            
        except Exception as e:
            await callback.message.edit_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}",
                reply_markup=types.InlineKeyboardMarkup(
                    inline_keyboard=[[
                        types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="admin")
                    ]]
                )
            )

    async def broadcast_message(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        from ..database.models import UserManager
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            conn = sqlite3.connect(settings.DB_PATH)
            cursor = conn.cursor()
            cursor.execute("SELECT user_id FROM users")
            user_ids = [row[0] for row in cursor.fetchall()]
            conn.close()
            
            sent = 0
            failed = 0
            
            if message.photo:
                # –†–∞—Å—Å—ã–ª–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å –ø–æ–¥–ø–∏—Å—å—é
                photo_file_id = message.photo[-1].file_id
                caption = message.caption or ""
                
                for user_id in user_ids:
                    try:
                        await message.bot.send_photo(
                            chat_id=user_id,
                            photo=photo_file_id,
                            caption=caption
                        )
                        sent += 1
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                        failed += 1
                        continue
                        
                result_message = f"üì∏ –†–∞—Å—Å—ã–ª–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"
                if failed > 0:
                    result_message += f"\n‚ùå –û—à–∏–±–∫–∏: {failed} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
                    
            else:
                # –†–∞—Å—Å—ã–ª–∫–∞ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–∞
                broadcast_text = message.text
                
                for user_id in user_ids:
                    try:
                        await message.bot.send_message(
                            chat_id=user_id,
                            text=broadcast_text
                        )
                        sent += 1
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                        failed += 1
                        continue
                        
                result_message = f"üì¢ –†–∞—Å—Å—ã–ª–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"
                if failed > 0:
                    result_message += f"\n‚ùå –û—à–∏–±–∫–∏: {failed} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
            
            await message.answer(
                result_message,
                reply_markup=get_admin_keyboard()
            )
            
        except Exception as e:
            await message.answer(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ: {str(e)}",
                reply_markup=get_admin_keyboard()
            )
        finally:
            await state.clear()